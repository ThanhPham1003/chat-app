version: '3.8'
services:
  user:
    build:
      context: .
      dockerfile: deployments/user/Dockerfile
    ports:
      - "50051:50051"
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=phamthanh
      - DB_PASSWORD=password
      - DB_NAME=chat_app
      - JWT_SECRET=secret-key
      - USER_GRPC_ADDR=0.0.0.0:50051
      - USER_HTTP_ADDR=:8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chat-app-network

  message:
    build:
      context: .
      dockerfile: deployments/message/Dockerfile
    ports:
      - "50052:50052"
      - "8081:8081"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=phamthanh
      - DB_PASSWORD=password
      - DB_NAME=chat_app
      - REDIS_ADDR=redis:6380
      - JWT_SECRET=secret-key
      - MESSAGE_GRPC_ADDR=0.0.0.0:50052
      - MESSAGE_HTTP_ADDR=:8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - chat-app-network

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=phamthanh
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=chat_app
    ports:
      - "5433:5433"
    command: -p 5433
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phamthanh -d chat_app -p 5433"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - chat-app-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    command: ["redis-server", "--port", "6379"]
    networks:
      - chat-app-network

volumes:
  postgres-data:

networks:
  chat-app-network:
    driver: bridge